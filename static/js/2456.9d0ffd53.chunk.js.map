{"version":3,"file":"static/js/2456.9d0ffd53.chunk.js","mappings":"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","sources":["../node_modules/bnc-onboard/dist/esm/hd-wallet-51018814.js","../node_modules/bnc-onboard/node_modules/hdkey/lib/hdkey.js","../node_modules/bs58/index.js","../node_modules/bs58check/base.js","../node_modules/bs58check/index.js"],"sourcesContent":["import * as ethUtil from 'ethereumjs-util';\nimport HDKey from 'hdkey';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (![\"60'\", \"1'\", \"73799'\", \"246'\"].includes(parts[2])) {\n    return false;\n  }\n\n  if (parts[3] === undefined || parts[3] === \"0'\") {\n    return true;\n  }\n\n  var accountFieldNumber = Number(parts[3].slice(0, -1));\n\n  if (isNaN(accountFieldNumber) || accountFieldNumber < 0 || parts[3].slice(-1) !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldNumber = Number(parts[4]);\n\n  if (isNaN(changeFieldNumber) || changeFieldNumber < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldNumber = Number(parts[5]);\n\n  if (isNaN(addressFieldNumber) || addressFieldNumber < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n"],"names":["publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","publicKey","chainCode","path","hdk","HDKey","Buffer","addresses","i","dkey","deriveChild","address","toString","push","dPath","concat","isValidPath","parts","split","includes","undefined","accountFieldNumber","Number","slice","isNaN","changeFieldNumber","addressFieldNumber","assert","require","crypto","bs58check","secp256k1","MASTER_SECRET","from","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","versions","this","depth","index","_privateKey","_publicKey","_fingerprint","parentFingerprint","serialize","hdkey","version","key","buffer","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","createHash","update","digest","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","alloc","privateKey","derive","entries","forEach","c","hardened","childIndex","parseInt","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","readUInt8","fromJSON","obj","module","exports","basex","base58","checksumFn","decodeRaw","payload","checksum","newChecksum","string","Error","decodeUnsafe","bs58checkBase","tmp"],"sourceRoot":""}